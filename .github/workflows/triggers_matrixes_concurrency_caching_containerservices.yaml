# This workflow can perform a build and test process for a Java Spring Boot application with a few additional steps, including checking the health of Elasticsearch and Cassandra service containers that are spun up for testing, performing security testing with Snyk, scanning the project with SonarCloud, and publishing the built binary to JFrog Artifactory.

# The workflow is triggered on pushes and pull requests to the main branch, and runs on an Ubuntu machine. The strategy section uses a matrix to test the application with different versions of Java, Elasticsearch, and Cassandra. The services section sets up two containers for Elasticsearch and Cassandra, maps the container ports to the host, and runs health checks to ensure that the containers are up and running.

# The workflow then checks out the code, sets up Java, and caches Maven packages. It then builds the application with Maven, runs a security test with Snyk, and scans the project with SonarCloud. The built binary is then published to JFrog Artifactory.

# Finally, the workflow runs a JMeter health check on the recently built application to verify whether it needs to be rolled back in case of any failures.

name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  SONAR_HOST_URL:
  SONAR_PROJECT_KEY: 
  JFROG_USERNAME: 
  JFROG_PASSWORD: 

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [adopt@1.11.0-9, adopt@1.8.0-282]
        elasticsearch: [7.10.2]
        cassandradb: [3.11.11]

    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:${{ matrix.elasticsearch }}
        ports:
          - 9200:9200
          - 9300:9300
        options: --health-cmd='curl -s -f http://localhost:9200/_cat/health' --health-interval=5s --health-timeout=3s --health-retries=5
      cassandradb:
        image: cassandra:${{ matrix.cassandradb }}
        ports:
          - 9042:9042
        options: --health-cmd='cqlsh -e "SELECT * FROM system_schema.keyspaces"' --health-interval=5s --health-timeout=3s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven

    - name: Build with Maven
      run: mvn -B clean verify

    - name: Snyk security test
      uses: snyk/actions/mvn@master
      with:
        snyk-token: ${{ secrets.SNYK_TOKEN }}

    - name: SonarCloud scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
        SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

    - name: Publish to JFrog Artifactory
      run: mvn -s .m2/settings.xml deploy

    - name: JMeter health check
      uses: fumieval/jmeter-report@v2
      env:
        JMETER_BIN_DIR: /opt/apache-jmeter-5.4.1/bin